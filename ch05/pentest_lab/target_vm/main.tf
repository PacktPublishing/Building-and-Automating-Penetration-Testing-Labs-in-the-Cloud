resource "random_string" "random_password" {
  length           = 12
  special          = true
  override_special = "!#$%&"
  min_lower        = 2
  min_special      = 2
  min_upper        = 2
}

locals {
    vm_username = "testuser"
    vm_password = random_string.random_password.result
}

resource "azurerm_public_ip" "public_ip_target" {
  name                = "public-ip-target"
  location            = var.rg_location
  resource_group_name = var.rg_name
  allocation_method   = "Dynamic"
}

resource "azurerm_network_interface" "nic_target" {
  name                = "nic-target"
  location            = var.rg_location
  resource_group_name = var.rg_name

  ip_configuration {
    name                          = "nic_configuration_target"
    subnet_id                     = var.subnet
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.public_ip_target.id
  }
}

resource "azurerm_network_interface_security_group_association" "nsg_assoc_target" {
  network_interface_id      = azurerm_network_interface.nic_target.id
  network_security_group_id = var.nsg
}

resource "azurerm_network_interface_application_security_group_association" "asg_assoc_target" {
  network_interface_id          = azurerm_network_interface.nic_target.id
  application_security_group_id = var.asg
}

resource "azurerm_linux_virtual_machine" "vm_target" {
  name                  = "vm-target"
  location              = var.rg_location
  resource_group_name   = var.rg_name
  size                  = "Standard_D2s_v3"
  network_interface_ids = [azurerm_network_interface.nic_target.id]

  os_disk {
    name                 = "os-disk-target"
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "0001-com-ubuntu-server-jammy"
    sku       = "22_04-lts-gen2"
    version   = "latest"
  }

  computer_name                   = "vm-target"
  admin_username                  = local.vm_username
  admin_password                  = local.vm_password
  disable_password_authentication = false

  boot_diagnostics {
    storage_account_uri = null
  }

  identity {
    type = "SystemAssigned"
  }

  custom_data = base64encode(templatefile("${path.module}/boot-script.sh", {}))
}


resource "azurerm_key_vault" "key_vault" {
  name                        = "rg-01-key-vault"
  location                    = var.rg_location
  resource_group_name         = var.rg_name
  sku_name                    = "standard"
  tenant_id                   = data.azurerm_client_config.current.tenant_id
  soft_delete_retention_days  = 7
  purge_protection_enabled    = false

  access_policy {
    tenant_id = data.azurerm_client_config.current.tenant_id
    object_id = azurerm_linux_virtual_machine.vm_target.identity[0].principal_id

    secret_permissions = [
      "Get",
      "Set",
      "List"
    ]
  }

  access_policy {
    tenant_id = data.azurerm_client_config.current.tenant_id
    object_id = azurerm_user_assigned_identity.managed_identity.principal_id

    secret_permissions = [
      "Get",
      "Set",
      "List"
    ]
  }
}

resource "azurerm_user_assigned_identity" "managed_identity" {
  name                = "my-managed-identity"
  location            = var.rg_location
  resource_group_name = var.rg_name
}

data "azurerm_client_config" "current" {}

data "azurerm_subscription" "current" {}

resource "azurerm_role_assignment" "role_assignment_01" {
  scope                = "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.rg_name}"
  role_definition_name = "Contributor"
  principal_id         = azurerm_user_assigned_identity.managed_identity.principal_id
}

resource "azurerm_role_assignment" "role_assignment_02" {
  scope                = "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.rg_name}"
  role_definition_name = "Contributor"
  principal_id         = azurerm_linux_virtual_machine.vm_target.identity[0].principal_id
}
